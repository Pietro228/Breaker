!!! PŘESUNUTO NA TODOIST !!!

- Input bude fungovat jako v Unrealu. Buď focus na UI nebo na hru.
Hra bude managovat kliknutí pomocí ptr na fci. Bude existovat funkce getGameObjectByMousePos().
Pokud bude focus na UI, tak se po kliknutí zavolá ptr na fci, která zavolá určitému objektu fci "clicked".
// nebo
Bude prostě normálně input a když se klikne na UI, tak se pošle event UI. A když se klikne na hru, tak bude clicked na hru.
Klávesnice bude zatím defaultně pro celou hru.

- Jednoduché structy nechat jako makra (VECTOR2, COLOR), ale ostatní dát raději jako funkce newNazevStructu, aby se předešlo problémy s datovými typy (Takže předělat GAMEOBJECT na newGameObject)
- !! Udělat komponentům registrování? Co kdyby to byly lokální proměnné, tak by se ztratily.
- Vymyslet jak handlovat fonty a obrázky. Dát fonty do arraye (_engineCore_installFont)?
- Jde načíst textury z paměti (xxd -i example.png > example_image.h [SDL_RWops *rw = SDL_RWFromMem(example_png, example_png_len); SDL_Texture *texture = IMG_LoadTexture_RW(renderer, rw, 1);]), 
- UI layer (Font, UI renderer)
- Přidat timed log message (Bude se přidávat co pár vteřin)

DONE:
- Udělat komponenty jako: TextureComponent? Pak by se nemusela používat funkce "draw" v game objectu
- Draw collisions
- Random ID
- Bude engineCore, který má v sobě struct Level, který má structy (gameObject) v právě načteném levelu (level bude struct).
Levelu se zavolá funkce load a ta vytvoří gameObject a hodí se do arraye v gameManageru.
- Udělat generateProjectTemplate.sh, který udělá project template s includy atd.